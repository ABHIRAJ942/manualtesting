{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9                                                           \fs36 MODULE - 1\par

\pard\sl240\slmult1\fs28     (1 )  What is SDLC\par
  Ans - SDLC is a structure imposed on the  development \par
             of a  software product that defines the process for planning,\par
             implementation, testing, documentation,deployment,\par
             and ongoing  maintenance and support.\par
          - There are a number of different development model. \par
          - A Software Development Life Cycle is essentially a series of steps, or \par
             phases, that provide a model for the development and lifecycle \par
             management of an application or piece of software.\par
\par
    (2)  What is software testing?\par
  Ans - Testing is the process of evaluating a system or its \par
            components with the intent to find that whether it satisfies \par
            the specified requirements or not.\par
         - This activity results in the actual, expected and difference between \par
            their result.\par
         -  simple words testing is executing a system in order to identify \par
           any gaps, errors or missing requirements in contrary to the \par
           actual desire or requirements.\par
\par
    (3)  What is agile methodology?\par
  Ans - Agile SDLC model is a combination of iterative and incremental \par
           process models with focus on process adaptability and customer \par
           satisfaction by rapid delivery of working software product.  \par
         - Agile Methods break the product into small incremental builds.\par
         - These builds are provided in iterations.\par
         - Each iteration typically lasts from about one to three weeks.\par
         -  iteration involves cross functional teams working \par
            simultaneously on various areas like planning,\par
            requirements analysis, design, coding, unit testing, \par
            and acceptance testing.\par
  \par
   (4)  What is SRS\par
 Ans - A software requirements specification (SRS)\par
          is a complete description of the behavior of the system \par
          to be developed.\par
        - It includes a set of use cases that describe all of the interactions that\par
          the users will have with the software.\par
       - Use cases are also known as functional requirements. In \par
         addition to  use cases, the SRS also contains nonfunctional \par
         or supplementary requirement.\par
       - This standard describes possible structures, desirable contents, and \par
         qualities of a software requirements specification.\par
\par
  (5)  What is oops\par
Ans - Identifying objects and assigning responsibilities to these objects.\par
       - Objects communicate to other objects by sending messages.\par
       - Messages are received by the method of an object\par
       - An object is like a black box.\par
       - The internal details are hidden.\par
       - Object is derived from abstract data type\par
       - Object-oriented programming has a web of interacting\par
         objects, each house-keeping its own state.\par
  \par
  (6)  Write Basic Concepts of oops\par
Ans - Object,Class,Encapsulation,Inheritance,Polymorphism,Overriding,\par
         Overloading,Abstraction these all are basic concepts of oops\par
\par
  (7)  What is object\par
Ans - An object represents an individual, identifiable item, unit, or entity,\par
         either real or abstract, with a well-defined role in the problem domain.\par
        - An "object" is anything to which aconcept applies. \par
        - This is the basic unit of object oriented programming.\par
        - That is both data and function that operate on data are bundled as a \par
           unit called as object.\par
\par
  (8)  What is class\par
Ans - When you define a class, you define a blueprint for an object.\par
        - This doesn't actually define any data, but it does define what    \par
           the class name means, that is, what an object of the class will \par
           consist of and what operations can be performed on such an object.\par
        - A class represents an abstraction of the object and the \par
           properties and behavior of that object.\par
\par
  (9)  What is encapsulation\par
Ans - Encapsulation is the practice of including in an object everything \par
           it needs hidden from other objects. The internal state is usually \par
           not accessible by other objects.\par
        - Encapsulation is placing the data and the functions that work on that \par
          data in the same place. While working with procedural languages, it is \par
          not always clear which functions work on which variables \par
          but object orient programming provides you framework to \par
          place the data and the relevant functions together in the same object.\par
\par
(10)  What is inheritance\par
Ans - Inheritance means that one class inherits the characteristics of\par
           another class. This is also called a \ldblquote is a\rdblquote  relationship\par
        - One of the most useful aspects of object-oriented programming \par
           is code reusability. As the name suggested Inheritance is the \par
           process of forming a new class from an existing class that is from \par
           the existing class called as base class, new class is formed called \par
           as derived class.\par
\par
 (11)  What is polymorphism\par
Ans -  Polymorphism means \ldblquote having many forms\rdblquote .\par
\lang1033             \lang9 It's  allows different objects to respond to the same message\par
            in different ways, the response specific to the type of the object.\par
         - The ability to use an operator or function in different ways in \par
            other words giving different meaning or functions to the \par
            operators or functions is called polymorphism.\par
\par
 (12)  Draw Usecase on Online book shopping\par
Ans -  {{\field{\*\fldinst{HYPERLINK https://drive.google.com/file/d/1K8E4J8S8DO6b9INokrH87xIL0UaveSlc/view?usp=drivesdk }}{\fldrslt{https://drive.google.com/file/d/1K8E4J8S8DO6b9INokrH87xIL0UaveSlc/view?usp=drivesdk\ul0\cf0}}}}\f0\fs28\par
\par
\par
 (13)  Draw Usecase on online bill payment system (paytm)\par
Ans - {{\field{\*\fldinst{HYPERLINK https://drive.google.com/file/d/1AfuFL1Au1Y6YWzGcwph6NIolxFH-GtLO/view?usp=drivesdk }}{\fldrslt{https://drive.google.com/file/d/1AfuFL1Au1Y6YWzGcwph6NIolxFH-GtLO/view?usp=drivesdk\ul0\cf0}}}}\f0\fs28\par
\par
\par
 (14)  Write SDLC phases with basic introduction\par
Ans - \par
       (1) Requirement Gathering \par
       - Although requirements may be documented in written form, \par
          they may be incomplete, unambiguous, or even incorrect.\par
       - Requirements will Change\par
       - Validation is needed throughout the software lifecycle, not only when\par
          the \ldblquote final system\rdblquote  is delivered.\par
       \par
      (2) Analysis Phase\par
       -  The analysis phase defines the requirements of the system,\par
           independent of how these requirements will be accomplished.\par
      -  This phase defines the problem that the customer is trying to solve.\par
      -  The deliverable result at the end of this phase is a \par
          requirement document.\par
\fs22\par
       \fs28 (3)  Design Phase\par
       - The Design team can now expand upon the information established in \par
          the requirement document.\par
        -  The requirement document must guide this decision process.\par
          Analyzing the trade-offs of necessary complexity allows for many \par
          things to remain simple which, in turn, will eventually lead to a higher \par
          quality product.\par
        -  The architecture team also converts the typical scenario into a test \par
          plan.\par
\par
      (4) Implementation Phase\par
       -In the implementation phase, the team builds the components either\par
         from scratch or by composition.\par
       -Given the architecture document from the design phase and the \par
         requirement document from the analysis phase, the team should build \par
         exactly what has been requested, though there is still room for \par
         innovation and flexibility.\par
       -For example, a component may be narrowly designed for\par
         this particular system, or the component may be made more \par
        general to satisfy a reusability guideline.\par
\par
\fs22        \fs28 (5) Testing Phase\par
       -Simply stated, quality is very important. Many companies have not \par
         learned that quality is important and deliver claimed \par
         functionality but at a lower quality level.\par
       -It is much easier to explain to a customer why there is a \par
         missing  feature than to explain to a customer why the product \par
         lacks quality.\par
       - A customer satisfied with the quality of a product will remain loyal and\par
         wait for new functionality in the next version.\par
       -Quality is a distinguishing attribute of a system indicating the \par
         degree of excellence.\par
\par
     (6) Maintenance Phase\par
      -Software maintenance is one of the activities in software \par
       engineering, and is the process of enhancing and optimizing \par
       deployed software (software release), as well as fixing defects.\par
      -Software maintenance is also one of the phases in the System \par
       Development Life Cycle , as it applies to software development. \par
      -The maintenance phase is the phase which comes after deployment of \par
        the software into the field.     \par
\par
(15)  Explain Phases of the waterfall model\par
Ans - The waterfall is unrealistic for many reasons, \par
           especially:\par
         -Requirements must be \ldblquote frozen\rdblquote  to early in the life cycle\par
         -Requirements are validated too late  \par
         - Applications(When to use?)\par
         -Requirement are very well documented, clear and fixed.\par
           Product definition is stable.\par
         -Technology is understood and is not dynamic.\par
         -There are no ambiguous requirements.\par
         -Ample resources with required expertise are available to support the \par
          product.\par
\par
(16) Write phases of spiral model\par
Ans - \par
      -Spiral Model is very widely used in the software industry as it is          \par
        in synch with the natural development process of any product \par
        i.e. learning with  maturity and also involves minimum risk for \par
        the customer as well as the development firms. Following are \par
        the typical uses of Spiral model:\par
       When costs there are a budget constraint and risk evaluation is \par
        important.\par
      - For medium to high risk projects.\par
      -Long-term project commitment because of potential changes to \par
       economic priorities as the requirements change with time.\par
      -Customer is not sure of their requirements which are usually the case.\par
      -Requirements are complex and need evaluation to get clarity.\par
      -New product line which should be released in phases to get enough \par
       customer feedback.\par
      -Significant changes are expected in the product during the\par
       development cycle.\par
\par
(17) Write agile manifesto principles\par
Ans- 1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\par
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's  advantage.\par
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference for a shorter timescale.\par
4. Business people and developers must work together daily throughout the project.\par
5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.\par
6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.\par
7. Working software is the primary  of progress.\par
8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.\par
9. Continuous attention to technical excellence and good design enhances agility.\par
10. Simplicity \f1  the art of maximizing the amount of work not done \emdash  is essential.\par
11. The best architecture, requirements, and designs emerge from self-organizing teams.\par
12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts  behavior accordingly.\f0\par
\fs22\par
\fs28 (18) Explain working methodology of agile model and also write pros \par
        and cons.\par
Ans - Agile SDLC model is a combination of iterative and incremental \par
          process models with focus on process adaptability and customer \par
          satisfaction by rapid delivery of working software product.\par
        -Agile Methods break the product into small incremental builds.\par
        -These builds are provided in iterations.\par
        -Each iteration typically last from about one to three weeks.\par
        -Every iteration involves cross functional teams working \par
         simultaneously on various areas like planning, requirements analysis, \par
         design, coding, unit testing, and acceptance testing.\par
   Pros -\par
      - Is a very realistic approach to software development\par
        Promotes teamwork and training.\par
      -Functionality can be developed rapidly and demonstrated.\par
        Resource requirements are minimum.\par
      -Suitable for fixed or changing requirements\par
       Delivers early partial working solutions. \par
    cons-\par
      - Not suitable for handling complex dependencies.\par
      -More risk of sustainability, maintainability and extensibility.\par
      -An overall plan, an agile leader and agile PM practice is a must without \par
       which it will not work.\par
      -Strict delivery management dictates the scope, functionality to be\par
       delivered, and adjustments to meet the deadlines.\par
      -Depends heavily on customer interaction, so if customer is not \par
        clear, team can be driven in the wrong direction.\par
\par
(19) Draw usecase on Online shopping product using COD.\par
Ans - {{\field{\*\fldinst{HYPERLINK https://drive.google.com/file/d/1qXdAabb_IuUYpJ87iP_iLG1l6o_TEmqY/view?usp=drivesdk }}{\fldrslt{https://drive.google.com/file/d/1qXdAabb_IuUYpJ87iP_iLG1l6o_TEmqY/view?usp=drivesdk\ul0\cf0}}}}\f0\fs28  \par
\par
\par
\par
(20) Draw usecase on Online shopping product using payment gateway.\par
Ans - {{\field{\*\fldinst{HYPERLINK https://drive.google.com/file/d/1kF5wPp-O6Cd6wsKKlY5iWh3ld8nuqES4/view?usp=drivesdk }}{\fldrslt{https://drive.google.com/file/d/1kF5wPp-O6Cd6wsKKlY5iWh3ld8nuqES4/view?usp=drivesdk\ul0\cf0}}}}\f0\fs28\par
\par
\fs22\par
}
 